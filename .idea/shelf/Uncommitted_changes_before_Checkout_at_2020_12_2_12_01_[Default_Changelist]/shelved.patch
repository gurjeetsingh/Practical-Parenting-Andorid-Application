Index: .idea/gradle.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"GradleMigrationSettings\" migrationVersion=\"1\" />\r\n  <component name=\"GradleSettings\">\r\n    <option name=\"linkedExternalProjectsSettings\">\r\n      <GradleProjectSettings>\r\n        <option name=\"testRunner\" value=\"PLATFORM\" />\r\n        <option name=\"distributionType\" value=\"DEFAULT_WRAPPED\" />\r\n        <option name=\"externalProjectPath\" value=\"$PROJECT_DIR$\" />\r\n        <option name=\"gradleJvm\" value=\"1.8\" />\r\n        <option name=\"modules\">\r\n          <set>\r\n            <option value=\"$PROJECT_DIR$\" />\r\n            <option value=\"$PROJECT_DIR$/app\" />\r\n          </set>\r\n        </option>\r\n        <option name=\"resolveModulePerSourceSet\" value=\"false\" />\r\n      </GradleProjectSettings>\r\n    </option>\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/gradle.xml	(revision 6917ad066859edf9e06496e100ad3269c0c7f3ff)
+++ .idea/gradle.xml	(date 1606886243905)
@@ -15,6 +15,7 @@
           </set>
         </option>
         <option name="resolveModulePerSourceSet" value="false" />
+        <option name="useQualifiedModuleNames" value="true" />
       </GradleProjectSettings>
     </option>
   </component>
Index: app/src/main/java/com/e/practicalparentlavateam/UI/TimeoutActivity.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>/*This is the activity for the timer\r\n * Here, the timeout activity is  defined and\r\n * layout is used to make the timer run. It\r\n * is heavily reliant on the TimeService to\r\n * keep timer alive even if app is closed.\r\n * */\r\n\r\npackage com.e.practicalparentlavateam.UI;\r\n\r\nimport androidx.appcompat.app.ActionBar;\r\nimport androidx.appcompat.app.AlertDialog;\r\nimport androidx.appcompat.app.AppCompatActivity;\r\nimport androidx.appcompat.widget.Toolbar;\r\nimport androidx.core.app.NotificationCompat;\r\nimport androidx.core.app.NotificationManagerCompat;\r\n\r\nimport android.app.Notification;\r\nimport android.app.NotificationChannel;\r\nimport android.app.NotificationManager;\r\nimport android.app.PendingIntent;\r\nimport android.content.BroadcastReceiver;\r\nimport android.content.Context;\r\nimport android.content.DialogInterface;\r\nimport android.content.Intent;\r\nimport android.content.IntentFilter;\r\nimport android.content.SharedPreferences;\r\nimport android.content.res.Resources;\r\nimport android.graphics.BitmapFactory;\r\nimport android.os.Build;\r\nimport android.os.Bundle;\r\nimport android.os.Handler;\r\nimport android.os.Vibrator;\r\nimport android.view.Menu;\r\nimport android.view.View;\r\nimport android.widget.AdapterView;\r\nimport android.widget.ArrayAdapter;\r\nimport android.widget.Button;\r\nimport android.widget.EditText;\r\nimport android.widget.ProgressBar;\r\nimport android.widget.Spinner;\r\nimport android.widget.TextView;\r\nimport android.widget.Toast;\r\n\r\n\r\nimport com.e.practicalparentlavateam.Model.AudioController;\r\nimport com.e.practicalparentlavateam.Model.TimeService;\r\nimport com.e.practicalparentlavateam.R;\r\n\r\nimport java.sql.Time;\r\nimport java.util.Locale;\r\n\r\nimport static android.app.Notification.EXTRA_NOTIFICATION_ID;\r\nimport static java.lang.Math.round;\r\n\r\npublic class TimeoutActivity extends AppCompatActivity {\r\n\r\n\r\n    private Button startButton;\r\n    private Button pauseButton;\r\n    private Button resetButton;\r\n    private Button customButton;\r\n    private Button alarmOffButton;\r\n    EditText userTime;\r\n    private boolean isTimerRunning = false;\r\n    private long timeLeftInMilliSeconds;\r\n    private long selectedTime;\r\n    private ProgressBar progressBar;\r\n    private TextView progressText;\r\n    private TextView timeFactorText;\r\n    double timeo=0;\r\n\r\n    int endTimeFlag=0;\r\n    long endTime;\r\n    long systemEndTime;\r\n    double progresstimepercent;\r\n    boolean ispaused=false;\r\n    int timeFactor=1;\r\n    int selectedTimeForPause;\r\n    double totalelapsed=0;\r\n    Intent requiredintent;\r\n    Spinner timeFieldSpinner;\r\n    private boolean timerforcereset;\r\n    boolean resetChecker=false;\r\n\r\n    Context context = this;\r\n\r\n\r\n\r\n    private TextView timerValue;\r\n    Intent pauseIntent;\r\n    Intent resetIntent;\r\n\r\n    @Override\r\n    public void onCreate(Bundle savedInstanceState) {\r\n        alarmOffButton = (Button) findViewById(R.id.alarm_off);\r\n        super.onCreate(savedInstanceState);\r\n        setContentView(R.layout.activity_timeout);\r\n\r\n        Toolbar toolbar = (Toolbar) findViewById(R.id.timeout_toolbar);\r\n        setSupportActionBar(toolbar);\r\n\r\n        ActionBar actionBar = getSupportActionBar();\r\n        actionBar.setDisplayHomeAsUpEnabled(true);\r\n        createTimeDurationSpinner();\r\n        timeFactorText=findViewById(R.id.timefactor2);\r\n        createTimeFactorSpinner();\r\n\r\n\r\n        timerValue = (TextView) findViewById(R.id.timer_text);\r\n        timerValue.setBackgroundResource(R.color.stopg);\r\n        //For the progress piechart\r\n        progressBar=findViewById(R.id.circular_progress_bar);\r\n        progressText=findViewById(R.id.progressText);\r\n        createNotificationChannel();\r\n\r\n\r\n\r\n        /*\r\n        This allows us to use the clickback from the notification box to stop the alarm.\r\n         */\r\n        if (savedInstanceState == null) {\r\n            Bundle extras = getIntent().getExtras();\r\n            if(extras == null) {\r\n            }\r\n            else if (extras.getBoolean(\"StopAlarm\")) {\r\n                AudioController.stopAudio();\r\n            }\r\n\r\n        }\r\n\r\n\r\n        if (isTimerRunning == false) {\r\n            millisecondConverterAndTimerUIupdate(selectedTime,timerValue);\r\n        }\r\n\r\n        setupStartButton();\r\n        setupPauseButton();\r\n        setupCustomButton();\r\n        setupAlarmOffButton();\r\n        setupResetButton();\r\n\r\n    }\r\n\r\n\r\n\r\n    @Override\r\n    protected void onStop() {\r\n        super.onStop();\r\n\r\n    }\r\n\r\n    @Override\r\n    protected void onDestroy() {\r\n        super.onDestroy();\r\n    }\r\n\r\n    @Override\r\n    protected void onResume() {\r\n        super.onResume();\r\n        if (isTimerRunning){\r\n            pauseButton.setVisibility(View.VISIBLE);\r\n        }\r\n\r\n        registerReceiver(broadCastReceiver, new IntentFilter(TimeService.TIME_BROADCAST));\r\n    }\r\n\r\n    /*\r\n    The broadcast reciever, whenever it recieves information from the service,which is the\r\n    time remaining in milliseconds, it immediately updates the UI.\r\n     */\r\n    private BroadcastReceiver broadCastReceiver = new BroadcastReceiver() {\r\n        @Override\r\n        public void onReceive(Context context, Intent intent) {\r\n            updateUI(intent);\r\n        }\r\n    };\r\n\r\n    private void setLatestEndTime(int restime){\r\n        SharedPreferences settings = getSharedPreferences(\"endpref\", 0);\r\n        SharedPreferences.Editor editor = settings.edit();\r\n        editor.putInt(\"endtime\",restime);\r\n        editor.apply();\r\n\r\n    }\r\n    private int getLatestEndTime()\r\n    {\r\n        SharedPreferences settings = getSharedPreferences(\"endpref\", 0);\r\n        int newtime = settings.getInt(\"endtime\", 0);\r\n        return newtime;\r\n    }\r\n\r\n    /*\r\n    This updates the UI whenever user is viewing the activity. It gets the information\r\n    from the counterservice. When the time goes to 0 or below 0, a notification is sent\r\n    to the phone immediately.\r\n     */\r\n    private void updateUI(Intent intent) {\r\n\r\n        if(endTimeFlag==0)\r\n        {\r\n            final int time = intent.getIntExtra(\"time\", 0);\r\n\r\n            if(getLatestEndTime()!=0)\r\n            {\r\n                systemEndTime =getLatestEndTime();\r\n            }\r\n            else\r\n            {\r\n                setLatestEndTime(time);\r\n                systemEndTime=getLatestEndTime();\r\n            }\r\n\r\n            endTimeFlag++;\r\n        }\r\n        final int time = intent.getIntExtra(\"time\", 0);\r\n        double elapsedtime = intent.getDoubleExtra(\"elap\", 0);\r\n       // setElapsedTime((int)elapsedtime);\r\n        endTime = intent.getLongExtra(\"endtime\", 0);\r\n        int mins = (int) (time / (double) 1000) / 60;\r\n        int secs = (int) (time / (double) 1000) % 60;\r\n        if (time == 0 || time < 0)\r\n\r\n        {\r\n            isTimerRunning = false;\r\n            createNotificationChannel();\r\n            totalelapsed=0;\r\n            alarmOffButton.setVisibility(View.VISIBLE);\r\n            pauseButton.setVisibility(View.INVISIBLE);\r\n            timeFieldSpinner.setVisibility(View.INVISIBLE);\r\n            endTimeFlag = 0;\r\n            setLatestEndTime(0);\r\n            setTimeFactor(1);\r\n            setTimeSpeedText();\r\n            notIf();\r\n            //Added vibrator\r\n            Vibrator alarm = (Vibrator) getSystemService(Context.VIBRATOR_SERVICE);\r\n            alarm.vibrate(5000);\r\n\r\n            //This handler is for removing the alarmoff button after a period of time\r\n            Handler cancelNotificiaton = new Handler();\r\n            long delay = 12000;\r\n            cancelNotificiaton.postDelayed(new Runnable() {\r\n                public void run() {\r\n                    alarmOffButton.setVisibility(View.INVISIBLE);\r\n                }\r\n            }, delay);\r\n            if(elapsedtime<0)\r\n            {\r\n                progressBar.setProgress(0);\r\n            }\r\n\r\n            progressText.setText(\"0\");\r\n            String timeLeftFormatted = String.format(Locale.getDefault(), \"%02d:%02d\", mins, secs);\r\n            timerValue.setText(timeLeftFormatted);\r\n            timerforcereset=false;\r\n            return;\r\n\r\n        }\r\n\r\n        //To keep variables updating even if app is closed/sidelined\r\n        String timeLeftFormatted = String.format(Locale.getDefault(), \"%02d:%02d\", mins, secs);\r\n        timerValue.setText(timeLeftFormatted);\r\n        pauseIntent = intent;\r\n        pauseButton.setVisibility(View.VISIBLE);\r\n        resetButton.setVisibility(View.VISIBLE);\r\n        timeFieldSpinner.setVisibility(View.VISIBLE);\r\n        timerforcereset=true;\r\n        createNotificationChannel();\r\n        setTimeSpeedText();\r\n     //   requiredintent.putExtra(\"factor\",getTimeFactor());\r\n       // System.out.println(\"real time factor is\"+getTimeFactor());\r\n        intent.putExtra(\"factor\",getTimeFactor());\r\n\r\n\r\n        if (time == 0 || time < 0 ||(((systemEndTime / 1000) - elapsedtime-totalelapsed) / (systemEndTime / 1000)) * 100==0) {\r\n            progressBar.setProgress(0);\r\n            progressText.setText(\"0\");\r\n        } else {\r\n            progresstimepercent = (((systemEndTime / 1000) - elapsedtime-totalelapsed) / (systemEndTime / 1000)) * 100;\r\n           //System.out.println(\"system end time is\"+systemEndTime);\r\n            //System.out.println(\"progtimepers\"+progresstimepercent);\r\n            //System.out.println(\"elapsed time is\"+elapsedtime);\r\n            //System.out.println(\"total elapsed time is\"+totalelapsed);\r\n            Math.ceil(progresstimepercent);\r\n            String totper;\r\n            if(progresstimepercent<0)\r\n            {\r\n                totper=\"0\";\r\n            }\r\n            else {\r\n                totper = Integer.toString((int) progresstimepercent);\r\n            }\r\n            progressBar.setProgress((int) progresstimepercent);\r\n            if (elapsedtime < 0) {\r\n                progressText.setText(R.string.hundred);\r\n            } else {\r\n                progressText.setText(totper);\r\n            }\r\n        }\r\n\r\n    }\r\n\r\n    private void setTimeSpeedText()\r\n    {\r\n        int timeFacCheck=getTimeFactor();\r\n        if(timeFacCheck==1)\r\n        {\r\n            timeFactorText.setText(R.string.time1);\r\n        }\r\n        if(timeFacCheck==2)\r\n        {\r\n            timeFactorText.setText(R.string.time2);\r\n        }\r\n        if(timeFacCheck==3)\r\n        {\r\n            timeFactorText.setText(R.string.time3);\r\n        }\r\n        if(timeFacCheck==4)\r\n        {\r\n            timeFactorText.setText(R.string.time4);\r\n        }\r\n        if(timeFacCheck==5)\r\n        {\r\n            timeFactorText.setText(R.string.time5);\r\n        }\r\n        if(timeFacCheck==6)\r\n        {\r\n            timeFactorText.setText(R.string.time6);\r\n        }\r\n        if(timeFacCheck==7)\r\n        {\r\n            timeFactorText.setText(R.string.time7);\r\n        }\r\n    }\r\n\r\n\r\n    /*\r\n    The following method implements our notification, which takes sends an intent to the TimeoutActivity\r\n    and calls the AudioManager class to stop audio, once the notification box is clicked.\r\n\r\n    Resources used to learn make a notification:https://developer.android.com/training/notify-user/build-notification\r\n    Another resource: https://developer.android.com/guide/topics/ui/notifiers/notifications\r\n     */\r\n    public void notIf()\r\n    {\r\n\r\n        Intent intent = new Intent(this, TimeoutActivity.class);\r\n        intent.putExtra(\"StopAlarm\",true);\r\n        intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);\r\n        PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);\r\n        PendingIntent snoozePendingIntent = PendingIntent.getBroadcast(this, 0, intent, 0);\r\n\r\n\r\n\r\n        NotificationCompat.Builder builder = new NotificationCompat.Builder(this, \"97\")\r\n                .setSmallIcon(R.drawable.babyclock)\r\n                .setContentTitle(\"ALARM\")\r\n                .setContentText(\"Time's Up! Touch Box To Turn Off Alarm!\")\r\n                .setSmallIcon(R.mipmap.ic_launcher_round)\r\n                .setLargeIcon(BitmapFactory.decodeResource(context.getResources(), R.mipmap.babyclock))\r\n                .setPriority(NotificationCompat.PRIORITY_DEFAULT)\r\n                // Set the intent that will fire when the user taps the notification\r\n                .setColor(getResources().getColor(R.color.appcolr))\r\n                .setContentIntent(pendingIntent)\r\n                .setAutoCancel(true);\r\n\r\n        NotificationManagerCompat notificationManager = NotificationManagerCompat.from(this);\r\n        notificationManager.notify(97, builder.build());\r\n\r\n\r\n\r\n\r\n        /*\r\n        Intent intent = new Intent(this, TimeoutActivity.class);\r\n        intent.putExtra(\"StopAlarm\",true);\r\n        PendingIntent pIntent = PendingIntent.getActivity(this, 0,\r\n                intent, PendingIntent.FLAG_UPDATE_CURRENT);\r\n\r\n        Notification AlarmNotify;\r\n        AlarmNotify = new Notification.Builder(this)\r\n                .setContentTitle(getString(R.string.time_up))\r\n                .setContentText(getString(R.string.hint_for_turn_off))\r\n                .setSmallIcon(R.mipmap.ic_launcher_round)\r\n                .setLargeIcon(BitmapFactory.decodeResource(context.getResources(),\r\n                        R.mipmap.babyclock))\r\n                .setContentIntent(pIntent)\r\n                .setColor(getResources().getColor(R.color.appcolr))\r\n                .setAutoCancel(true).build();\r\n\r\n        final NotificationManager notificationManager =\r\n                (NotificationManager) getSystemService(NOTIFICATION_SERVICE);\r\n\r\n        notificationManager.notify(0, AlarmNotify);\r\n\r\n\r\n        //To turn off the notification bar after some time:\r\n        Handler cancelnotificiaton = new Handler();\r\n        long delay = 12000;\r\n        cancelnotificiaton.postDelayed(new Runnable() {\r\n            public void run() {\r\n                notificationManager.cancel(0);\r\n            }\r\n        }, delay);\r\n*/\r\n    }\r\n\r\n    @Override\r\n    protected void onPause() {\r\n        super.onPause();\r\n    }\r\n\r\n\r\n    /*\r\n    The following method creates a spinner, where it takes an array of data, and allows you to choose options\r\n    quickly to set a duration of time. Each position you select is going to be displayed on the timer\r\n    until you click on start timer. Whenever you click on an option, the service will be stopped first,and the\r\n    time will be sent to the UI updater. Then, you can START TIMER to restart the timer with the set duration.\r\n     */\r\n    private void createTimeDurationSpinner() {\r\n        Spinner timeFieldSpinner = (Spinner) findViewById(R.id.time_spinner);\r\n        //To get the string array from the Strings.XML\r\n        Resources res = this.getResources();\r\n        String[] timePiece = res.getStringArray(R.array.minutes_array);\r\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(this,\r\n                android.R.layout.simple_spinner_dropdown_item, timePiece);\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        timeFieldSpinner.setAdapter(adapter);\r\n        timeFieldSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                if (position == 0) {\r\n\r\n                        timeLeftInMilliSeconds = 60000;\r\n                        selectedTime = 60000;\r\n                        selectedTimeForPause = 60000;\r\n                        setLatestResetTime(60000);\r\n                        //millisecondConverterAndTimerUIupdate(selectedTime,timerValue);\r\n\r\n                }\r\n                if (position == 1) {\r\n                    if(timerforcereset==true)\r\n                    {\r\n                        Toast.makeText(getApplicationContext(),\"Please Reset Timer First\",Toast.LENGTH_SHORT).show();\r\n                    }\r\n                    else {\r\n                        Intent serviceintent = new Intent(TimeoutActivity.this, TimeService.class);\r\n                        stopService(serviceintent);\r\n                        timeLeftInMilliSeconds = 60000;\r\n                        selectedTime = 60000;\r\n                        selectedTimeForPause = 60000;\r\n                        setLatestResetTime(60000);\r\n                        progressBar.setProgress(100);\r\n                        progressText.setText(\"100\");\r\n                        millisecondConverterAndTimerUIupdate(selectedTime, timerValue);\r\n                    }\r\n                }\r\n                if (position == 2) {\r\n                    if(timerforcereset==true)\r\n                    {\r\n                        Toast.makeText(getApplicationContext(),\"Please Reset Timer First\",Toast.LENGTH_SHORT).show();\r\n                    }\r\n                    else {\r\n                        Intent serviceintent = new Intent(TimeoutActivity.this, TimeService.class);\r\n                        stopService(serviceintent);\r\n                        timeLeftInMilliSeconds = 120000;\r\n                        selectedTime = 120000;\r\n                        selectedTimeForPause = 120000;\r\n                        setLatestResetTime(120000);\r\n                        progressBar.setProgress(100);\r\n                        progressText.setText(\"100\");\r\n                        millisecondConverterAndTimerUIupdate(selectedTime, timerValue);\r\n                    }\r\n\r\n                }\r\n                if (position == 3) {\r\n                        if(timerforcereset==true)\r\n                        {\r\n                            Toast.makeText(getApplicationContext(),\"Please Reset Timer First\",Toast.LENGTH_SHORT).show();\r\n                        }\r\n                        else {\r\n                        Intent serviceIntent = new Intent(TimeoutActivity.this, TimeService.class);\r\n                        stopService(serviceIntent);\r\n                        timeLeftInMilliSeconds = 180000;\r\n                        selectedTime = 180000;\r\n                        selectedTimeForPause = 180000;\r\n                        setLatestResetTime(180000);\r\n                        progressBar.setProgress(100);\r\n                        progressText.setText(\"100\");\r\n                        millisecondConverterAndTimerUIupdate(selectedTime, timerValue);\r\n                    }\r\n                }\r\n                if (position == 4) {\r\n                    if(timerforcereset==true)\r\n                    {\r\n                        Toast.makeText(getApplicationContext(),\"Please Reset Timer First\",Toast.LENGTH_SHORT).show();\r\n                    }\r\n                    else {\r\n                        Intent serviceIntent = new Intent(TimeoutActivity.this, TimeService.class);\r\n                        stopService(serviceIntent);\r\n                        timeLeftInMilliSeconds = 300000;\r\n                        selectedTime = 300000;\r\n                        selectedTimeForPause = 300000;\r\n                        setLatestResetTime(300000);\r\n                        progressBar.setProgress(100);\r\n                        progressText.setText(\"100\");\r\n                        millisecondConverterAndTimerUIupdate(selectedTime, timerValue);\r\n                    }\r\n                }\r\n                if (position == 5) {\r\n                    if(timerforcereset==true)\r\n                    {\r\n                        Toast.makeText(getApplicationContext(),R.string.resetplease,Toast.LENGTH_LONG).show();\r\n                    }\r\n                    else {\r\n                        Intent serviceIntent = new Intent(TimeoutActivity.this, TimeService.class);\r\n                        stopService(serviceIntent);\r\n                        timeLeftInMilliSeconds = 600000;\r\n                        selectedTime = 600000;\r\n                        selectedTimeForPause = 600000;\r\n                        setLatestResetTime(600000);\r\n                        progressBar.setProgress(100);\r\n                        progressText.setText(\"100\");\r\n                        millisecondConverterAndTimerUIupdate(selectedTime, timerValue);\r\n                    }\r\n                }\r\n            }\r\n\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {\r\n            }\r\n        });\r\n    }\r\n\r\n    private void createTimeFactorSpinner() {\r\n        timeFieldSpinner = (Spinner) findViewById(R.id.factorspinner);\r\n        //To get the string array from the Strings.XML\r\n        Resources res = this.getResources();\r\n        String[] timePiece = res.getStringArray(R.array.timefactor);\r\n        ArrayAdapter<String> adapter = new ArrayAdapter<>(this,\r\n                android.R.layout.simple_spinner_dropdown_item, timePiece);\r\n        adapter.setDropDownViewResource(android.R.layout.simple_spinner_dropdown_item);\r\n        timeFieldSpinner.setAdapter(adapter);\r\n        timeFieldSpinner.setOnItemSelectedListener(new AdapterView.OnItemSelectedListener() {\r\n            @Override\r\n            public void onItemSelected(AdapterView<?> parent, View view, int position, long id) {\r\n                if (position == 0) {\r\n                }\r\n                if (position == 1) {\r\n\r\n                    timeFactor=1;\r\n                    timeFactorText.setText(R.string.time1);\r\n                    setTimeFactor(1);\r\n                    Intent serviceIntent = new Intent(TimeoutActivity.this, TimeService.class);\r\n                    serviceIntent.putExtra(\"factor\",getTimeFactor());\r\n                    startService(serviceIntent);\r\n                }\r\n                if (position == 2) {\r\n\r\n                    timeFactor=2;\r\n                    timeFactorText.setText(R.string.time2);\r\n                    setTimeFactor(2);\r\n                    Intent serviceIntent = new Intent(TimeoutActivity.this, TimeService.class);\r\n                    serviceIntent.putExtra(\"factor\",getTimeFactor());\r\n                    startService(serviceIntent);\r\n                }\r\n                if (position == 3) {\r\n                    timeFactor=3;\r\n                    timeFactorText.setText(R.string.time3);\r\n                    setTimeFactor(3);\r\n                    Intent serviceIntent = new Intent(TimeoutActivity.this, TimeService.class);\r\n                    serviceIntent.putExtra(\"factor\",getTimeFactor());\r\n                    startService(serviceIntent);}\r\n                if (position == 4) {\r\n                    timeFactor=4;\r\n                    timeFactorText.setText(R.string.time4);\r\n                    setTimeFactor(4);\r\n                    Intent serviceIntent = new Intent(TimeoutActivity.this, TimeService.class);\r\n                    serviceIntent.putExtra(\"factor\",getTimeFactor());\r\n                    startService(serviceIntent);\r\n                }\r\n                if (position == 5) {\r\n                    timeFactor = 5;\r\n                    timeFactorText.setText(R.string.time5);\r\n                    setTimeFactor(5);\r\n                    Intent serviceIntent = new Intent(TimeoutActivity.this, TimeService.class);\r\n                    serviceIntent.putExtra(\"factor\",getTimeFactor());\r\n                    startService(serviceIntent);\r\n                }\r\n                if(position==6){\r\n                    timeFactor=6;\r\n                    timeFactorText.setText(R.string.time6);\r\n                    setTimeFactor(6);\r\n                    Intent serviceIntent = new Intent(TimeoutActivity.this, TimeService.class);\r\n                    serviceIntent.putExtra(\"factor\",getTimeFactor());\r\n                    startService(serviceIntent);\r\n                }\r\n                if(position==7){\r\n                    timeFactor=7;\r\n                    timeFactorText.setText(R.string.time7);\r\n                    setTimeFactor(7);\r\n                    Intent serviceIntent = new Intent(TimeoutActivity.this, TimeService.class);\r\n                    serviceIntent.putExtra(\"factor\",getTimeFactor());\r\n                    startService(serviceIntent);\r\n                }\r\n            }\r\n            @Override\r\n            public void onNothingSelected(AdapterView<?> parent) {\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    //The following function streamlines our updating the textview to easily convert\r\n    //from seconds to milliseconds.\r\n    public void millisecondConverterAndTimerUIupdate(long selectedTime, TextView userText)\r\n    {\r\n        int mins = (int) (selectedTime / (double) 1000) / 60;\r\n        int secs = (int) (selectedTime / (double) 1000) % 60;\r\n        String timeLeftFormatted = String.format(Locale.getDefault(), \"%02d:%02d\", mins, secs);\r\n        userText.setText(timeLeftFormatted);\r\n    }\r\n\r\n    /*\r\n  The start button starts the background service by calling from counterservice, to run time.\r\n   */\r\n    private void setupStartButton() {\r\n\r\n        startButton = (Button) findViewById(R.id.time_push_button);\r\n        startButton.setOnClickListener(new View.OnClickListener() {\r\n\r\n            public void onClick(View view) {\r\n\r\n                Intent serviceIntent = new Intent(TimeoutActivity.this, TimeService.class);\r\n                setserviceIntent(serviceIntent);\r\n\r\n                if(getLatestResetTime()==0)\r\n                {\r\n                    setLatestResetTime((int)timeLeftInMilliSeconds);\r\n                    createTimeFactorSpinner();\r\n                    timeFieldSpinner.setSelection(1);\r\n                }\r\n                createTimeFactorSpinner();\r\n                setTimeFactor(1);\r\n                timeFieldSpinner.setSelection(1);\r\n                serviceIntent.putExtra(\"factor\",timeFactor);\r\n                System.out.println(\"starting timefactor\"+timeFactor);\r\n                System.out.println(\"mills\"+timeLeftInMilliSeconds);\r\n                serviceIntent.putExtra(\"mills\", timeLeftInMilliSeconds);\r\n                serviceIntent.putExtra(\"reset\",resetChecker);\r\n                selectedTime=timeLeftInMilliSeconds;\r\n                isTimerRunning = true;\r\n                //ispaused=false;\r\n                startService(serviceIntent);\r\n                //System.out.println(\"Time left for start\" + mTimeLeftInMillis);\r\n                registerReceiver(broadCastReceiver, new IntentFilter(TimeService.TIME_BROADCAST));\r\n                pauseButton.setVisibility(View.VISIBLE);\r\n                resetButton.setVisibility(View.VISIBLE);\r\n                timerforcereset=false;\r\n                timeFieldSpinner.setVisibility(View.VISIBLE);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void setserviceIntent(Intent serviceIntent) {\r\n        requiredintent=serviceIntent;\r\n    }\r\n\r\n    /*\r\n Pause button stops the service temporarily storing the time left in milliseconds.\r\n  */\r\n    private void setupPauseButton() {\r\n\r\n        pauseButton = (Button) findViewById(R.id.pause_button);\r\n        pauseButton.setOnClickListener(new View.OnClickListener() {\r\n            public void onClick(View view) {\r\n                int time = pauseIntent.getIntExtra(\"time\", 0);\r\n                totalelapsed=totalelapsed+pauseIntent.getDoubleExtra(\"elap\", 0);\r\n                timeLeftInMilliSeconds = time;\r\n                ispaused=true;\r\n                isTimerRunning = false;\r\n                Intent serviceIntent = new Intent(TimeoutActivity.this, TimeService.class);\r\n                stopService(serviceIntent);\r\n                // unregisterReceiver(broadcastReceiver);\r\n                pauseButton.setVisibility(View.INVISIBLE);\r\n                timeFieldSpinner.setVisibility(View.INVISIBLE);\r\n\r\n\r\n            }\r\n        });\r\n    }\r\n\r\n\r\n    @Override\r\n    public boolean onCreateOptionsMenu(Menu menu) {\r\n        getMenuInflater().inflate(R.menu.menu_timeout, menu);\r\n        return true;\r\n    }\r\n\r\n    private void setupCustomButton() {\r\n                /*\r\n        The CUSTOMBUTTON uses an alertdialog to quickly allow us to set a custom time.\r\n         */\r\n        customButton = (Button) findViewById(R.id.custom_time);\r\n        customButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                if (timerforcereset == true) {\r\n                    Toast.makeText(getApplicationContext(), \"Please Reset Timer First\", Toast.LENGTH_SHORT).show();\r\n                }\r\n                else {\r\n                    Intent serviceIntent = new Intent(TimeoutActivity.this, TimeService.class);\r\n                    stopService(serviceIntent);\r\n                    AlertDialog.Builder builder = new AlertDialog.Builder(context, R.style.MyDialogTheme);\r\n                    builder.setTitle(R.string.enter_custom_minute);\r\n                    userTime = new EditText(context);\r\n                    builder.setView(userTime);\r\n                    builder.setIcon(R.drawable.babyclock);\r\n                    builder.setPositiveButton(R.string.finish_set_time, new DialogInterface.OnClickListener() {\r\n                        @Override\r\n                        public void onClick(DialogInterface dialog, int which) {\r\n                            String newTime = userTime.getText().toString();\r\n                            double time = Double.parseDouble(newTime);\r\n                            long customTime = Long.parseLong(\"\" + Math.round(time));\r\n                            timeLeftInMilliSeconds = customTime * 60000;\r\n                            selectedTime = timeLeftInMilliSeconds;\r\n                            setLatestResetTime((int) timeLeftInMilliSeconds);\r\n                            isTimerRunning = false;\r\n                            totalelapsed = 0;\r\n                            //ispaused=false;\r\n                            progressBar.setProgress(100);\r\n                            progressText.setText(\"100\");\r\n                            endTimeFlag = 0;\r\n                            setLatestEndTime(0);\r\n                            millisecondConverterAndTimerUIupdate(selectedTime, timerValue);\r\n                        }\r\n                    });\r\n                    builder.setNegativeButton(R.string.cancel, new DialogInterface.OnClickListener() {\r\n                        @Override\r\n                        public void onClick(DialogInterface dialog, int which) {\r\n                            dialog.dismiss();\r\n                        }\r\n                    });\r\n                    AlertDialog alertDialog = builder.create();\r\n                    alertDialog.show();\r\n                }\r\n            }\r\n        });\r\n    }\r\n\r\n    /*\r\n      To turn off alarm at the push of a button using the AudioController function.\r\n       */\r\n    private void setupAlarmOffButton() {\r\n\r\n        alarmOffButton = (Button) findViewById(R.id.alarm_off);\r\n        alarmOffButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                AudioController.stopAudio();\r\n                alarmOffButton.setVisibility(View.INVISIBLE);\r\n            }\r\n        });\r\n    }\r\n\r\n    private void setupResetButton() {\r\n                /*\r\n        The RESETBUTTON stops our service, and reverts back to our last chosen time. Also\r\n        makes our pause button invisible as the timer is automatically paused.\r\n         */\r\n\r\n        resetButton = (Button) findViewById(R.id.reset_button);\r\n        resetButton.setOnClickListener(new View.OnClickListener() {\r\n            @Override\r\n            public void onClick(View v) {\r\n                Intent serviceIntent = new Intent(TimeoutActivity.this, TimeService.class);\r\n                stopService(serviceIntent);\r\n                int requiredtime=getLatestResetTime();\r\n                timeLeftInMilliSeconds = requiredtime;\r\n                pauseButton.setVisibility(View.INVISIBLE);\r\n                isTimerRunning = false;\r\n                timerforcereset=false;\r\n                totalelapsed=0;\r\n                //ispaused=false;\r\n                progressBar.setProgress(100);\r\n                progressText.setText(\"100\");\r\n                endTimeFlag=0;\r\n                setLatestEndTime(0);\r\n                setTimeFactor(1);\r\n                //  System.out.println(selectedTime);\r\n                millisecondConverterAndTimerUIupdate(requiredtime,timerValue);\r\n                setLatestResetTime(0);\r\n                resetButton.setVisibility(View.INVISIBLE);\r\n                resetChecker=true;\r\n                timeFieldSpinner.setVisibility(View.INVISIBLE);\r\n                setTimeSpeedText();\r\n            }\r\n\r\n\r\n        });\r\n    }\r\n\r\n    private void setLatestResetTime(int restime){\r\n        SharedPreferences settings = getSharedPreferences(\"resetpref\", 0);\r\n        SharedPreferences.Editor editor = settings.edit();\r\n        editor.putInt(\"resettime\",restime);\r\n        editor.apply();\r\n\r\n    }\r\n    private int getLatestResetTime()\r\n    {\r\n        SharedPreferences settings = getSharedPreferences(\"resetpref\", 0);\r\n        int newtime = settings.getInt(\"resettime\", 0);\r\n        return newtime;\r\n    }\r\n    private void setTimeFactor(int restime){\r\n        SharedPreferences settings = getSharedPreferences(\"timepref\", 0);\r\n        SharedPreferences.Editor editor = settings.edit();\r\n        editor.putInt(\"factime\",restime);\r\n        editor.apply();\r\n\r\n    }\r\n    private int getTimeFactor()\r\n    {\r\n        SharedPreferences settings = getSharedPreferences(\"timepref\", 0);\r\n        int newtime = settings.getInt(\"factime\", 0);\r\n        //System.out.println(\"newtime is\"+newtime);\r\n        return newtime;\r\n    }\r\n\r\n    private void setElapsedTime(int elapsedTime){\r\n        SharedPreferences settings = getSharedPreferences(\"elappref\", 0);\r\n        SharedPreferences.Editor editor = settings.edit();\r\n        editor.putInt(\"elaptime\",elapsedTime);\r\n        editor.apply();\r\n\r\n    }\r\n    private int getElapsedTime()\r\n    {\r\n        SharedPreferences settings = getSharedPreferences(\"elappref\", 0);\r\n        int newtime = settings.getInt(\"elaptime\", 0);\r\n        //System.out.println(\"newtime is\"+newtime);\r\n        return newtime;\r\n    }\r\n\r\n    private void forceresetchecker(boolean forceresetcheck)\r\n    {\r\n        if(forceresetcheck==true)\r\n        {\r\n            Toast.makeText(TimeoutActivity.this,\"Please Reset Timer First\",Toast.LENGTH_SHORT);\r\n        }\r\n    }\r\n\r\n\r\n\r\n\r\n    /*\r\n    For making the intent\r\n     */\r\n    public static Intent makeIntent(Context context) {\r\n        Intent timeoutIntent = new Intent(context, TimeoutActivity.class);\r\n        return timeoutIntent;\r\n    }\r\n    private void createNotificationChannel() {\r\n        // Create the NotificationChannel, but only on API 26+ because\r\n        // the NotificationChannel class is new and not in the support library\r\n        if (Build.VERSION.SDK_INT >= Build.VERSION_CODES.O) {\r\n            CharSequence name = getString(R.string.channelName);\r\n            String description = getString(R.string.channelDesc);\r\n            int importance = NotificationManager.IMPORTANCE_DEFAULT;\r\n            NotificationChannel channel = new NotificationChannel(\"97\", name, importance);\r\n            channel.setDescription(description);\r\n            // Register the channel with the system; you can't change the importance\r\n            // or other notification behaviors after this\r\n            NotificationManager notificationManager = getSystemService(NotificationManager.class);\r\n            notificationManager.createNotificationChannel(channel);\r\n        }\r\n    }\r\n\r\n\r\n}\r\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- app/src/main/java/com/e/practicalparentlavateam/UI/TimeoutActivity.java	(revision 6917ad066859edf9e06496e100ad3269c0c7f3ff)
+++ app/src/main/java/com/e/practicalparentlavateam/UI/TimeoutActivity.java	(date 1606891618233)
@@ -348,14 +348,13 @@
         intent.putExtra("StopAlarm",true);
         intent.setFlags(Intent.FLAG_ACTIVITY_NEW_TASK | Intent.FLAG_ACTIVITY_CLEAR_TASK);
         PendingIntent pendingIntent = PendingIntent.getActivity(this, 0, intent, PendingIntent.FLAG_UPDATE_CURRENT);
-        PendingIntent snoozePendingIntent = PendingIntent.getBroadcast(this, 0, intent, 0);
 
 
 
         NotificationCompat.Builder builder = new NotificationCompat.Builder(this, "97")
                 .setSmallIcon(R.drawable.babyclock)
                 .setContentTitle("ALARM")
-                .setContentText("Time's Up! Touch Box To Turn Off Alarm!")
+                .setContentText(getString(R.string.hint_for_turn_off))
                 .setSmallIcon(R.mipmap.ic_launcher_round)
                 .setLargeIcon(BitmapFactory.decodeResource(context.getResources(), R.mipmap.babyclock))
                 .setPriority(NotificationCompat.PRIORITY_DEFAULT)
Index: .idea/misc.xml
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+><?xml version=\"1.0\" encoding=\"UTF-8\"?>\r\n<project version=\"4\">\r\n  <component name=\"ProjectRootManager\" version=\"2\" languageLevel=\"JDK_1_7\" default=\"true\" project-jdk-name=\"1.8\" project-jdk-type=\"JavaSDK\">\r\n    <output url=\"file://$PROJECT_DIR$/build/classes\" />\r\n  </component>\r\n  <component name=\"ProjectType\">\r\n    <option name=\"id\" value=\"Android\" />\r\n  </component>\r\n</project>
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
--- .idea/misc.xml	(revision 6917ad066859edf9e06496e100ad3269c0c7f3ff)
+++ .idea/misc.xml	(date 1606886243831)
@@ -1,6 +1,6 @@
 <?xml version="1.0" encoding="UTF-8"?>
 <project version="4">
-  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_7" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
+  <component name="ProjectRootManager" version="2" languageLevel="JDK_1_8" default="true" project-jdk-name="1.8" project-jdk-type="JavaSDK">
     <output url="file://$PROJECT_DIR$/build/classes" />
   </component>
   <component name="ProjectType">
